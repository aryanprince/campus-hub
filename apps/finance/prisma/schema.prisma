// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    // TODO: Fix these hacky node_modules imports
    output   = "../node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model FinanceAccount {
    id                    String  @id @default(cuid())
    studentId             String  @unique
    hasOutstandingBalance Boolean @default(false)
}

model Invoice {
    id          String        @id @default(cuid())
    studentId   String
    amount      Float
    dueDate     DateTime
    invoiceType InvoiceType
    status      InvoiceStatus @default(OUTSTANDING)
    reference   String        @unique
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

enum InvoiceType {
    TUITION_FEES
    LIBRARY_FINE
}

enum InvoiceStatus {
    PAID
    OUTSTANDING
    PARTIALLY_PAID
    CANCELLED
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
